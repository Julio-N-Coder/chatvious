AWSTemplateFormatVersion: '2010-09-09'
Transform: AWS::Serverless-2016-10-31
Description: AWS Sam Template for chatvious

Globals:
  Function:
    Environment:
      Variables:
        NODE_ENV: production
        DOMAIN: chatvious.coding-wielder.com
        DOMAIN_URL: https://chatvious.coding-wielder.com
        SUB_DOMAIN: main.chatvious.coding-wielder.com
        SUB_DOMAIN_URL: https://main.chatvious.coding-wielder.com
        DYNAMODB_OPTIONS: '{}'
        IS_DEV_SERVER: false
    LoggingConfig:
      LogFormat: JSON

Parameters:
  ChatviousCertificateArn:
    Type: String
    Default: arn:aws:acm:us-west-1:580083607510:certificate/50b5027f-3ae1-491f-bd4e-b252cc2b953c
    Description: The ARN of the ACM certificate for the chatvious domain
      (chatvious.coding-wielder.com and *.chatvious.coding-wielder.com)
  ChatviousUsEastCertificateArn:
    Type: String
    Default: arn:aws:acm:us-east-1:580083607510:certificate/51f9f2a0-a159-4bdc-8096-de519d8e7180
    Description: The ARN of the ACM certificate for chatvious cloudfront
      distribution which requires the certificate to be created in us-east-1
      region (*.chatvious.coding-wielder.com)
  ChatviousDomainHostedZoneId:
    Type: String
    Default: Z0830272VPDW4QLTGOLN
    Description: The Hosted Zone ID for the chatvious domain

Resources:
  ChatviousTable:
    Type: AWS::DynamoDB::Table
    Properties:
      TableName: chatvious
      BillingMode: PROVISIONED
      ProvisionedThroughput:
        ReadCapacityUnits: 1
        WriteCapacityUnits: 1
      AttributeDefinitions:
        - AttributeName: PartitionKey
          AttributeType: S
        - AttributeName: SortKey
          AttributeType: S
      KeySchema:
        - AttributeName: PartitionKey
          KeyType: HASH
        - AttributeName: SortKey
          KeyType: RANGE

  TableChatviousReadCapacityScalableTarget:
    Type: AWS::ApplicationAutoScaling::ScalableTarget
    DependsOn: ChatviousTable
    Properties:
      ServiceNamespace: dynamodb
      ResourceId: table/chatvious
      ScalableDimension: dynamodb:table:ReadCapacityUnits
      MinCapacity: 1
      MaxCapacity: 10
      RoleARN: !Sub arn:aws:iam::${AWS::AccountId}:role/aws-service-role/dynamodb.application-autoscaling.amazonaws.com/AWSServiceRoleForApplicationAutoScaling_DynamoDBTable

  TableChatviousReadCapacityScalingPolicy:
    Type: AWS::ApplicationAutoScaling::ScalingPolicy
    DependsOn: TableChatviousReadCapacityScalableTarget
    Properties:
      ServiceNamespace: dynamodb
      ResourceId: table/chatvious
      ScalableDimension: dynamodb:table:ReadCapacityUnits
      PolicyName: chatvious-read-capacity-scaling-policy
      PolicyType: TargetTrackingScaling
      TargetTrackingScalingPolicyConfiguration:
        PredefinedMetricSpecification:
          PredefinedMetricType: DynamoDBReadCapacityUtilization
        ScaleOutCooldown: 60
        ScaleInCooldown: 60
        TargetValue: 70

  TableChatviousWriteCapacityScalableTarget:
    Type: AWS::ApplicationAutoScaling::ScalableTarget
    DependsOn: ChatviousTable
    Properties:
      ServiceNamespace: dynamodb
      ResourceId: table/chatvious
      ScalableDimension: dynamodb:table:WriteCapacityUnits
      MinCapacity: 1
      MaxCapacity: 10
      RoleARN: !Sub arn:aws:iam::${AWS::AccountId}:role/aws-service-role/dynamodb.application-autoscaling.amazonaws.com/AWSServiceRoleForApplicationAutoScaling_DynamoDBTable

  TableChatviousWriteCapacityScalingPolicy:
    Type: AWS::ApplicationAutoScaling::ScalingPolicy
    DependsOn: TableChatviousWriteCapacityScalableTarget
    Properties:
      ServiceNamespace: dynamodb
      ResourceId: table/chatvious
      ScalableDimension: dynamodb:table:WriteCapacityUnits
      PolicyName: chatvious-write-capacity-scaling-policy
      PolicyType: TargetTrackingScaling
      TargetTrackingScalingPolicyConfiguration:
        PredefinedMetricSpecification:
          PredefinedMetricType: DynamoDBWriteCapacityUtilization
        ScaleOutCooldown: 60
        ScaleInCooldown: 60
        TargetValue: 70

  dashboardPage:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: Chatvious_dashboardPage
      Description: Renders dashboard Page for Chatvious
      CodeUri: ./src
      Handler: dashboard.handler
      Runtime: nodejs20.x
      MemorySize: 256
      Timeout: 6
      Architectures:
        - x86_64
      Policies:
        - DynamoDBCrudPolicy:
            TableName: !Ref ChatviousTable
      Events:
        ChatviousRestApiGETdashboard:
          Type: Api
          Properties:
            Path: /dashboard
            Method: GET
            RestApiId: !Ref ChatviousRestApi
      Environment:
        Variables:
          CHATVIOUSTABLE_TABLE_NAME: !Ref ChatviousTable
          CHATVIOUSTABLE_TABLE_ARN: !GetAtt ChatviousTable.Arn
          USER_POOL_ID: !Ref UserPool
          USER_POOL_CLIENT_ID: !Ref UserPoolClient
          USER_POOL_ARN: !GetAtt UserPool.Arn
    Metadata:
      BuildMethod: makefile

  roomInfoPage:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: Chatvious_roomInfoPage
      Description: Renders roomInfo Page for Chatvious
      CodeUri: ./src
      Handler: roomInfo.handler
      Runtime: nodejs20.x
      MemorySize: 256
      Timeout: 6
      Architectures:
        - x86_64
      Policies:
        - DynamoDBCrudPolicy:
            TableName: !Ref ChatviousTable
      Events:
        ChatviousRestApiGETroomsRoomID:
          Type: Api
          Properties:
            Path: /rooms/{RoomID}
            Method: GET
            RestApiId: !Ref ChatviousRestApi
      Environment:
        Variables:
          CHATVIOUSTABLE_TABLE_NAME: !Ref ChatviousTable
          CHATVIOUSTABLE_TABLE_ARN: !GetAtt ChatviousTable.Arn
          USER_POOL_ID: !Ref UserPool
          USER_POOL_CLIENT_ID: !Ref UserPoolClient
          USER_POOL_ARN: !GetAtt UserPool.Arn
    Metadata:
      BuildMethod: makefile

  chatRoom:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: Chatvious_chatRoom
      Description: Renders chatRoom Page for Chatvious
      CodeUri: ./src
      Handler: chatRoom.handler
      Runtime: nodejs20.x
      MemorySize: 256
      Timeout: 6
      Architectures:
        - x86_64
      Policies:
        - DynamoDBCrudPolicy:
            TableName: !Ref ChatviousTable
      Events:
        ChatviousRestApiGETchatroomRoomID:
          Type: Api
          Properties:
            Path: /chat-room/{RoomID}
            Method: GET
            RestApiId: !Ref ChatviousRestApi
      Environment:
        Variables:
          CHATVIOUSTABLE_TABLE_NAME: !Ref ChatviousTable
          CHATVIOUSTABLE_TABLE_ARN: !GetAtt ChatviousTable.Arn
          USER_POOL_ID: !Ref UserPool
          USER_POOL_CLIENT_ID: !Ref UserPoolClient
          USER_POOL_ARN: !GetAtt UserPool.Arn
    Metadata:
      BuildMethod: makefile

  profilePage:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: Chatvious_profilePage
      Description: Renders profile Page for Chatvious
      CodeUri: ./src
      Handler: profilePage.handler
      Runtime: nodejs20.x
      MemorySize: 256
      Timeout: 6
      Architectures:
        - x86_64
      Environment:
        Variables:
          CHATVIOUSTABLE_TABLE_NAME: !Ref ChatviousTable
          CHATVIOUSTABLE_TABLE_ARN: !GetAtt ChatviousTable.Arn
          USER_POOL_ID: !Ref UserPool
          USER_POOL_CLIENT_ID: !Ref UserPoolClient
          USER_POOL_ARN: !GetAtt UserPool.Arn
      Policies:
        - DynamoDBCrudPolicy:
            TableName: !Ref ChatviousTable
      Events:
        ChatviousRestApiGETchatroomRoomID:
          Type: Api
          Properties:
            Path: /user/profilePage
            Method: GET
            RestApiId: !Ref ChatviousRestApi
    Metadata:
      BuildMethod: makefile

  createRoom:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: Chatvious_createRoom
      Description: Creates a new chat room
      CodeUri: ./src
      Handler: roomRoutes/createRoom/createRoom.handler
      Runtime: nodejs20.x
      MemorySize: 128
      Timeout: 6
      Architectures:
        - x86_64
      Policies:
        - DynamoDBCrudPolicy:
            TableName: !Ref ChatviousTable
      Events:
        ChatviousRestApiPOSTroomscreateRoom:
          Type: Api
          Properties:
            Path: /rooms/createRoom
            Method: POST
            RestApiId: !Ref ChatviousRestApi
      Environment:
        Variables:
          CHATVIOUSTABLE_TABLE_NAME: !Ref ChatviousTable
          CHATVIOUSTABLE_TABLE_ARN: !GetAtt ChatviousTable.Arn
    Metadata:
      BuildMethod: esbuild
      BuildProperties:
        Minify: true
        Bundle: true
        Target: es2020
        Sourcemap: false

  joinRoom:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: Chatvious_joinRoom
      Description: A user can join a chat room
      CodeUri: ./src
      Handler: roomRoutes/joinRoom/joinRoom.handler
      Runtime: nodejs20.x
      MemorySize: 128
      Timeout: 6
      Architectures:
        - x86_64
      Policies:
        - DynamoDBCrudPolicy:
            TableName: !Ref ChatviousTable
      Events:
        ChatviousRestApiPOSTroomsjoinRoom:
          Type: Api
          Properties:
            Path: /rooms/joinRoom
            Method: POST
            RestApiId: !Ref ChatviousRestApi
      Environment:
        Variables:
          CHATVIOUSTABLE_TABLE_NAME: !Ref ChatviousTable
          CHATVIOUSTABLE_TABLE_ARN: !GetAtt ChatviousTable.Arn
    Metadata:
      BuildMethod: esbuild
      BuildProperties:
        Minify: true
        Bundle: true
        Target: es2020
        Sourcemap: false

  acceptJoinRequest:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: Chatvious_acceptJoinRequest
      Description: Accepts a join request for a user to join a chat room
      CodeUri: ./src
      Handler: roomRoutes/acceptJoinRequest/acceptJoinRequest.handler
      Runtime: nodejs20.x
      MemorySize: 128
      Timeout: 6
      Architectures:
        - x86_64
      Policies:
        - DynamoDBCrudPolicy:
            TableName: !Ref ChatviousTable
      Events:
        ChatviousRestApiPOSTroomsacceptJoinRequest:
          Type: Api
          Properties:
            Path: /rooms/acceptJoinRequest
            Method: POST
            RestApiId: !Ref ChatviousRestApi
      Environment:
        Variables:
          CHATVIOUSTABLE_TABLE_NAME: !Ref ChatviousTable
          CHATVIOUSTABLE_TABLE_ARN: !GetAtt ChatviousTable.Arn
    Metadata:
      BuildMethod: esbuild
      BuildProperties:
        Minify: true
        Bundle: true
        Target: es2020
        Sourcemap: false

  rejectJoinRequest:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: Chatvious_rejectJoinRequest
      Description: Rejects a join request for a chat room
      CodeUri: ./src
      Handler: roomRoutes/rejectJoinRequest/rejectJoinRequest.handler
      Runtime: nodejs20.x
      MemorySize: 128
      Timeout: 6
      Architectures:
        - x86_64
      Policies:
        - DynamoDBCrudPolicy:
            TableName: !Ref ChatviousTable
      Events:
        ChatviousRestApiPOSTroomsrejectJoinRequest:
          Type: Api
          Properties:
            Path: /rooms/rejectJoinRequest
            Method: POST
            RestApiId: !Ref ChatviousRestApi
      Environment:
        Variables:
          CHATVIOUSTABLE_TABLE_NAME: !Ref ChatviousTable
          CHATVIOUSTABLE_TABLE_ARN: !GetAtt ChatviousTable.Arn
    Metadata:
      BuildMethod: esbuild
      BuildProperties:
        Minify: true
        Bundle: true
        Target: es2020
        Sourcemap: false

  kickMember:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: Chatvious_kickMember
      Description: Kicks a member from a chat room
      CodeUri: ./src
      Handler: roomRoutes/kickMember/kickMember.handler
      Runtime: nodejs20.x
      MemorySize: 128
      Timeout: 6
      Architectures:
        - x86_64
      Policies:
        - DynamoDBCrudPolicy:
            TableName: !Ref ChatviousTable
      Events:
        ChatviousRestApiPOSTroomskickMember:
          Type: Api
          Properties:
            Path: /rooms/kickMember
            Method: POST
            RestApiId: !Ref ChatviousRestApi
      Environment:
        Variables:
          CHATVIOUSTABLE_TABLE_NAME: !Ref ChatviousTable
          CHATVIOUSTABLE_TABLE_ARN: !GetAtt ChatviousTable.Arn
    Metadata:
      BuildMethod: esbuild
      BuildProperties:
        Minify: true
        Bundle: true
        Target: es2020
        Sourcemap: false

  leaveRoom:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: Chatvious_leaveRoom
      Description: A route for a user to leave a chat room
      CodeUri: ./src
      Handler: roomRoutes/leaveRoom/leaveRoom.handler
      Runtime: nodejs20.x
      MemorySize: 128
      Timeout: 6
      Architectures:
        - x86_64
      Policies:
        - DynamoDBCrudPolicy:
            TableName: !Ref ChatviousTable
      Events:
        ChatviousRestApiPOSTroomsleaveRoom:
          Type: Api
          Properties:
            Path: /rooms/leaveRoom
            Method: POST
            RestApiId: !Ref ChatviousRestApi
      Environment:
        Variables:
          CHATVIOUSTABLE_TABLE_NAME: !Ref ChatviousTable
          CHATVIOUSTABLE_TABLE_ARN: !GetAtt ChatviousTable.Arn
    Metadata:
      BuildMethod: esbuild
      BuildProperties:
        Minify: true
        Bundle: true
        Target: es2020
        Sourcemap: false

  deleteRoom:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: Chatvious_deleteRoom
      Description: Deletes a chat room
      CodeUri: ./src
      Handler: roomRoutes/deleteRoom/deleteRoom.handler
      Runtime: nodejs20.x
      MemorySize: 128
      Timeout: 6
      Architectures:
        - x86_64
      Policies:
        - DynamoDBCrudPolicy:
            TableName: !Ref ChatviousTable
      Events:
        ChatviousRestApiPOSTroomsdeleteRoom:
          Type: Api
          Properties:
            Path: /rooms/deleteRoom
            Method: POST
            RestApiId: !Ref ChatviousRestApi
      Environment:
        Variables:
          CHATVIOUSTABLE_TABLE_NAME: !Ref ChatviousTable
          CHATVIOUSTABLE_TABLE_ARN: !GetAtt ChatviousTable.Arn
    Metadata:
      BuildMethod: esbuild
      BuildProperties:
        Minify: true
        Bundle: true
        Target: es2020
        Sourcemap: false

  promoteOrDemoteUser:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: Chatvious_promoteOrDemoteUser
      Description: Promotes or demotes a user in a chat room
      CodeUri: ./src
      Handler: roomRoutes/promoteOrDemoteUser/promoteOrDemoteUser.handler
      Runtime: nodejs20.x
      MemorySize: 128
      Timeout: 6
      Architectures:
        - x86_64
      Policies:
        - DynamoDBCrudPolicy:
            TableName: !Ref ChatviousTable
      Events:
        ChatviousRestApiPOSTroomspromoteOrDemoteUser:
          Type: Api
          Properties:
            Path: /rooms/promoteOrDemoteUser
            Method: POST
            RestApiId: !Ref ChatviousRestApi
      Environment:
        Variables:
          CHATVIOUSTABLE_TABLE_NAME: !Ref ChatviousTable
          CHATVIOUSTABLE_TABLE_ARN: !GetAtt ChatviousTable.Arn
    Metadata:
      BuildMethod: esbuild
      BuildProperties:
        Minify: true
        Bundle: true
        Target: es2020
        Sourcemap: false

  fetchNewMessages:
    Type: AWS::Serverless::Function
    Properties:
      Description: Fetches new Messages for pagination
      CodeUri: ./src
      Handler: roomRoutes/fetchNewMessages/fetchNewMessages.handler
      Runtime: nodejs20.x
      MemorySize: 128
      Timeout: 6
      Architectures:
        - x86_64
      Environment:
        Variables:
          CHATVIOUSTABLE_TABLE_NAME: !Ref ChatviousTable
          CHATVIOUSTABLE_TABLE_ARN: !GetAtt ChatviousTable.Arn
      Policies:
        - DynamoDBCrudPolicy:
            TableName: !Ref ChatviousTable
      Events:
        ChatviousRestApiGETroomsfetchNewMessages:
          Type: Api
          Properties:
            Path: /rooms/fetchNewMessages
            Method: GET
            RestApiId: !Ref ChatviousRestApi
    Metadata:
      BuildMethod: esbuild
      BuildProperties:
        Minify: true
        Bundle: true
        Target: es2020
        Sourcemap: false

  deleteAccount:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: Chatvious_deleteAccount
      Description: Deletes a user account from the chatvious cognito userPool
      CodeUri: ./src
      Handler: userRoutes/deleteAccount/deleteAccount.handler
      Runtime: nodejs20.x
      MemorySize: 128
      Timeout: 6
      Architectures:
        - x86_64
      Policies:
        - DynamoDBCrudPolicy:
            TableName: !Ref ChatviousTable
        - Version: '2012-10-17'
          Statement:
            - Effect: Allow
              Action:
                - cognito-idp:AdminDeleteUser
              Resource: !GetAtt UserPool.Arn
      Events:
        ChatviousRestApiPOSTuserdeleteAccount:
          Type: Api
          Properties:
            Path: /user/deleteAccount
            Method: POST
            RestApiId: !Ref ChatviousRestApi
      Environment:
        Variables:
          CHATVIOUSTABLE_TABLE_NAME: !Ref ChatviousTable
          CHATVIOUSTABLE_TABLE_ARN: !GetAtt ChatviousTable.Arn
          USER_POOL_ID: !Ref UserPool
          USER_POOL_CLIENT_ID: !Ref UserPoolClient
          USER_POOL_ARN: !GetAtt UserPool.Arn
    Metadata:
      BuildMethod: esbuild
      BuildProperties:
        Minify: true
        Bundle: true
        Target: es2020
        Sourcemap: false

  callback:
    Type: AWS::Serverless::Function
    Properties:
      Description: Callback route to exchange cognito auth codes for tokens
      FunctionName: Chatvious_callback
      Architectures:
        - x86_64
      MemorySize: 128
      Timeout: 10
      CodeUri: ./src
      Handler: cognito/callback/callback.handler
      Runtime: nodejs20.x
      Environment:
        Variables:
          COGNITO_DOMAIN: !Sub https://${UserPoolDomain}.auth.${AWS::Region}.amazoncognito.com
          USER_POOL_ID: !Ref UserPool
          USER_POOL_CLIENT_ID: !Ref UserPoolClient
          USER_POOL_ARN: !GetAtt UserPool.Arn
          CALLBACK_URL: https://chatvious.coding-wielder.com/callback
      Events:
        ChatviousRestApiGETcallback:
          Type: Api
          Properties:
            Path: /callback
            Method: GET
            RestApiId: !Ref ChatviousRestApi
            Auth:
              Authorizer: NONE
        ChatviousRestApiOPTIONSCallback:
          Type: Api
          Properties:
            Path: /callback
            Method: OPTIONS
            RestApiId: !Ref ChatviousRestApi
            Auth:
              Authorizer: NONE

    Metadata:
      BuildMethod: esbuild
      BuildProperties:
        Minify: true
        Bundle: true
        Target: es2020
        Sourcemap: false

  LambdaAuthorizer:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: Chatvious_LambdaAuthorizer
      Description: The Lambda Authorizer for chatvious
      MemorySize: 128
      Timeout: 10
      CodeUri: ./src
      Handler: cognito/lambda-authorizer/lambda-authorizer.handler
      Runtime: nodejs20.x
      Architectures:
        - x86_64
      Environment:
        Variables:
          COGNITO_DOMAIN: !Sub https://${UserPoolDomain}.auth.${AWS::Region}.amazoncognito.com
          USER_POOL_ID: !Ref UserPool
          USER_POOL_CLIENT_ID: !Ref UserPoolClient
          USER_POOL_ARN: !GetAtt UserPool.Arn
    Metadata:
      BuildMethod: esbuild
      BuildProperties:
        Minify: true
        Bundle: true
        Target: es2020
        Sourcemap: false

  ChatviousRestApi:
    Type: AWS::Serverless::Api
    Properties:
      Name: Chatvious_RestApi
      StageName: main
      Auth:
        Authorizers:
          LambdaAuthorizer:
            FunctionArn: !GetAtt LambdaAuthorizer.Arn
            FunctionPayloadType: TOKEN
            Identity:
              Header: Cookie
              ReauthorizeEvery: 0
        DefaultAuthorizer: LambdaAuthorizer
      MethodSettings:
        - HttpMethod: '*'
          ResourcePath: /*
          ThrottlingRateLimit: 10
          ThrottlingBurstLimit: 15
      EndpointConfiguration:
        Type: REGIONAL
      Domain:
        DomainName: chatvious.coding-wielder.com
        CertificateArn: !Ref ChatviousCertificateArn
        EndpointConfiguration: REGIONAL
        Route53:
          HostedZoneId: !Ref ChatviousDomainHostedZoneId
      Cors:
        AllowMethods: '''OPTIONS, POST, GET'''
        AllowHeaders: '''Content-Type,Cookie'''
        AllowOrigin: '''*'''
        MaxAge: 5

  WebSocketManageConnectionsPolicy:
    Type: AWS::IAM::ManagedPolicy
    Properties:
      ManagedPolicyName: !Sub Chatvious_WebSocketManageConnectionsPolicy_${AWS::Region}
      PolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Action:
              - execute-api:ManageConnections
            Resource:
              - !Sub arn:aws:execute-api:${AWS::Region}:${AWS::AccountId}:${WebsocketApi}/*

  WSLambdaAuthorizer:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: Chatvious_WSLambdaAuthorizer
      Description: The Lambda Authorizer for chatvious websockets
      CodeUri: ./src
      Handler: websocket-endpoints/lambda-authorizer/websocket-auth.handler
      Runtime: nodejs20.x
      MemorySize: 128
      Timeout: 10
      Architectures:
        - x86_64
      Environment:
        Variables:
          COGNITO_DOMAIN: !Sub https://${UserPoolDomain}.auth.${AWS::Region}.amazoncognito.com
          USER_POOL_ID: !Ref UserPool
          USER_POOL_CLIENT_ID: !Ref UserPoolClient
          USER_POOL_ARN: !GetAtt UserPool.Arn
    Metadata:
      BuildMethod: esbuild
      BuildProperties:
        Minify: true
        Bundle: true
        Target: es2020
        Sourcemap: false

  WSConnect:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: Chatvious_WSConnect
      Description: The Default Websocket route for when a user first connects to a chat room
      CodeUri: ./src
      Handler: websocket-endpoints/connect/connect.handler
      Runtime: nodejs20.x
      MemorySize: 128
      Timeout: 6
      Architectures:
        - x86_64
      Policies:
        - DynamoDBCrudPolicy:
            TableName: !Ref ChatviousTable
      Environment:
        Variables:
          CHATVIOUSTABLE_TABLE_NAME: !Ref ChatviousTable
          CHATVIOUSTABLE_TABLE_ARN: !GetAtt ChatviousTable.Arn
    Metadata:
      BuildMethod: esbuild
      BuildProperties:
        Minify: true
        Bundle: true
        Target: es2020
        Sourcemap: false

  WSDisconnect:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: Chatvious_WSDisconnect
      Description: The Default Websocket route for when a user disconnects from a chat room
      CodeUri: ./src
      Handler: websocket-endpoints/disconnect/disconnect.handler
      Runtime: nodejs20.x
      MemorySize: 128
      Timeout: 6
      Architectures:
        - x86_64
      Policies:
        - !Ref WebSocketManageConnectionsPolicy
        - DynamoDBCrudPolicy:
            TableName: !Ref ChatviousTable
      Environment:
        Variables:
          CHATVIOUSTABLE_TABLE_NAME: !Ref ChatviousTable
          CHATVIOUSTABLE_TABLE_ARN: !GetAtt ChatviousTable.Arn
    Metadata:
      BuildMethod: esbuild
      BuildProperties:
        Minify: true
        Bundle: true
        Target: es2020
        Sourcemap: false

  joinRoomWS:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: Chatvious_joinRoomWS
      Description: A Websocket route for a user to join a chat room
      CodeUri: ./src
      Handler: websocket-endpoints/joinRoom/joinRoom.handler
      Runtime: nodejs20.x
      MemorySize: 128
      Timeout: 6
      Architectures:
        - x86_64
      Policies:
        - !Ref WebSocketManageConnectionsPolicy
        - DynamoDBCrudPolicy:
            TableName: !Ref ChatviousTable
      Environment:
        Variables:
          CHATVIOUSTABLE_TABLE_NAME: !Ref ChatviousTable
          CHATVIOUSTABLE_TABLE_ARN: !GetAtt ChatviousTable.Arn
    Metadata:
      BuildMethod: esbuild
      BuildProperties:
        Minify: true
        Bundle: true
        Target: es2020
        Sourcemap: false

  sendMessageWS:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: Chatvious_sendMessageWS
      Description: A Websocket route for a user to send a message in a chat room
      CodeUri: ./src
      Handler: websocket-endpoints/sendMessage/sendMessage.handler
      Runtime: nodejs20.x
      MemorySize: 128
      Timeout: 6
      Architectures:
        - x86_64
      Policies:
        - !Ref WebSocketManageConnectionsPolicy
        - DynamoDBCrudPolicy:
            TableName: !Ref ChatviousTable
      Environment:
        Variables:
          CHATVIOUSTABLE_TABLE_NAME: !Ref ChatviousTable
          CHATVIOUSTABLE_TABLE_ARN: !GetAtt ChatviousTable.Arn
    Metadata:
      BuildMethod: esbuild
      BuildProperties:
        Minify: true
        Bundle: true
        Target: es2020
        Sourcemap: false

  WebsocketApi:
    Type: AWS::ApiGatewayV2::Api
    Properties:
      Name: Chatvious_WebsocketApi
      ProtocolType: WEBSOCKET
      RouteSelectionExpression: $request.body.action
  WebsocketApiDomain:
    Type: AWS::ApiGatewayV2::DomainName
    Properties:
      DomainName: websocket.chatvious.coding-wielder.com
      DomainNameConfigurations:
        - CertificateArn: !Ref ChatviousCertificateArn
          EndpointType: REGIONAL
          SecurityPolicy: TLS_1_2
  WebsocketApiMapping:
    Type: AWS::ApiGatewayV2::ApiMapping
    Properties:
      ApiId: !Ref WebsocketApi
      DomainName: !Ref WebsocketApiDomain
      Stage: !Ref Stage

  WSConnectPermission:
    Type: AWS::Lambda::Permission
    DependsOn:
      - WebsocketApi
    Properties:
      Action: lambda:InvokeFunction
      FunctionName: !Ref WSConnect
      Principal: apigateway.amazonaws.com
  WSDisconnectPermission:
    Type: AWS::Lambda::Permission
    DependsOn:
      - WebsocketApi
    Properties:
      Action: lambda:InvokeFunction
      FunctionName: !Ref WSDisconnect
      Principal: apigateway.amazonaws.com
  joinRoomWSPermission:
    Type: AWS::Lambda::Permission
    DependsOn:
      - WebsocketApi
    Properties:
      Action: lambda:InvokeFunction
      FunctionName: !Ref joinRoomWS
      Principal: apigateway.amazonaws.com
  sendMessageWSPermission:
    Type: AWS::Lambda::Permission
    DependsOn:
      - WebsocketApi
    Properties:
      Action: lambda:InvokeFunction
      FunctionName: !Ref sendMessageWS
      Principal: apigateway.amazonaws.com

  WebsocketAuthorizer:
    Type: AWS::ApiGatewayV2::Authorizer
    Properties:
      ApiId: !Ref WebsocketApi
      AuthorizerType: REQUEST
      Name: Chatvious_WebsocketAuthorizer
      AuthorizerUri: !Sub arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${WSLambdaAuthorizer.Arn}/invocations
      IdentitySource:
        - route.request.querystring.tokens
        - route.request.header.Cookie

  ConnectRoute:
    Type: AWS::ApiGatewayV2::Route
    Properties:
      ApiId: !Ref WebsocketApi
      RouteKey: $connect
      AuthorizationType: CUSTOM
      AuthorizerId: !Ref WebsocketAuthorizer
      OperationName: ConnectRoute
      Target: !Sub integrations/${ConnectInteg}

  ConnectInteg:
    Type: AWS::ApiGatewayV2::Integration
    Properties:
      ApiId: !Ref WebsocketApi
      Description: Connect Integration
      IntegrationType: AWS_PROXY
      IntegrationUri: !Sub arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${WSConnect.Arn}/invocations

  DisconnectRoute:
    Type: AWS::ApiGatewayV2::Route
    Properties:
      ApiId: !Ref WebsocketApi
      RouteKey: $disconnect
      AuthorizationType: NONE
      OperationName: DisconnectRoute
      Target: !Sub integrations/${DisconnectInteg}

  DisconnectInteg:
    Type: AWS::ApiGatewayV2::Integration
    Properties:
      ApiId: !Ref WebsocketApi
      Description: Disconnect Integration
      IntegrationType: AWS_PROXY
      IntegrationUri: !Sub arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${WSDisconnect.Arn}/invocations

  JoinRoomRoute:
    Type: AWS::ApiGatewayV2::Route
    Properties:
      ApiId: !Ref WebsocketApi
      RouteKey: joinroom
      AuthorizationType: NONE
      OperationName: JoinRoomRoute
      Target: !Sub integrations/${JoinRoomInteg}

  JoinRoomInteg:
    Type: AWS::ApiGatewayV2::Integration
    Properties:
      ApiId: !Ref WebsocketApi
      Description: Send Message Integration
      IntegrationType: AWS_PROXY
      IntegrationUri: !Sub arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${joinRoomWS.Arn}/invocations

  SendMessageRoute:
    Type: AWS::ApiGatewayV2::Route
    Properties:
      ApiId: !Ref WebsocketApi
      RouteKey: sendmessage
      AuthorizationType: NONE
      OperationName: SendMessageRoute
      Target: !Sub integrations/${SendMessageInteg}

  SendMessageInteg:
    Type: AWS::ApiGatewayV2::Integration
    Properties:
      ApiId: !Ref WebsocketApi
      Description: Send Message Integration
      IntegrationType: AWS_PROXY
      IntegrationUri: !Sub arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${sendMessageWS.Arn}/invocations

  Deployment:
    Type: AWS::ApiGatewayV2::Deployment
    DependsOn:
      - ConnectRoute
      - JoinRoomRoute
      - SendMessageRoute
      - DisconnectRoute
    Properties:
      ApiId: !Ref WebsocketApi

  Stage:
    Type: AWS::ApiGatewayV2::Stage
    Properties:
      StageName: prod
      Description: prod Stage
      DeploymentId: !Ref Deployment
      ApiId: !Ref WebsocketApi
      DefaultRouteSettings:
        ThrottlingBurstLimit: 10
        ThrottlingRateLimit: 15

  saveUserDataFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: ./src
      Handler: cognito/post-signUp-trigger/saveUserData.handler
      Runtime: nodejs20.x
      MemorySize: 128
      Timeout: 4
      Architectures:
        - x86_64
      Policies:
        - DynamoDBCrudPolicy:
            TableName: !Ref ChatviousTable
      Environment:
        Variables:
          CHATVIOUSTABLE_TABLE_NAME: !Ref ChatviousTable
          CHATVIOUSTABLE_TABLE_ARN: !GetAtt ChatviousTable.Arn
      Events:
        CognitoUserPoolPostConfirmationTrigger:
          Type: Cognito
          Properties:
            UserPool: !Ref UserPool
            Trigger: PostConfirmation
    Metadata:
      BuildMethod: esbuild
      BuildProperties:
        Minify: true
        Target: es2020
        Sourcemap: false

  CognitoPreSignUp:
    Type: AWS::Serverless::Function
    Properties:
      Description: A Cognito PreSignUp trigger for custom user input validation
      CodeUri: ./src
      Handler: cognito/pre-signUp-trigger/index.handler
      Runtime: nodejs20.x
      MemorySize: 128
      Timeout: 6
      Architectures:
        - x86_64
      Events:
        CognitoUserPoolPreSignup:
          Type: Cognito
          Properties:
            UserPool: !Ref UserPool
            Trigger: PreSignUp
    Metadata:
      BuildMethod: esbuild
      BuildProperties:
        Minify: true
        Bundle: true
        Target: es2020
        Sourcemap: false

  UserPool:
    Type: AWS::Cognito::UserPool
    Properties:
      UserPoolName: !Sub ${AWS::StackName}-UserPool
      AdminCreateUserConfig:
        AllowAdminCreateUserOnly: false
      AutoVerifiedAttributes:
        - email
      AliasAttributes:
        - email
      UsernameConfiguration:
        CaseSensitive: false
      Schema:
        - AttributeDataType: String
          Name: email
          Required: true
          Mutable: true
      EmailConfiguration:
        # Change to DEVELOPER once I setup ses and specify arn here by SourceArn parameter
        EmailSendingAccount: COGNITO_DEFAULT
  UserPoolPermission:
    Type: AWS::Lambda::Permission
    DependsOn:
      - UserPool
    Properties:
      Action: lambda:InvokeFunction
      FunctionName: !Ref saveUserDataFunction
      Principal: cognito-idp.amazonaws.com
  PreSignUpUserPoolPermission:
    Type: AWS::Lambda::Permission
    DependsOn:
      - UserPool
    Properties:
      Action: lambda:InvokeFunction
      FunctionName: !Ref CognitoPreSignUp
      Principal: cognito-idp.amazonaws.com

  UserPoolClient:
    Type: AWS::Cognito::UserPoolClient
    Properties:
      ClientName: !Sub ${AWS::StackName}-UserPoolClient
      GenerateSecret: false
      UserPoolId: !Ref UserPool
      ExplicitAuthFlows:
        - ALLOW_USER_SRP_AUTH
        - ALLOW_REFRESH_TOKEN_AUTH
      PreventUserExistenceErrors: ENABLED
      RefreshTokenValidity: 365
      TokenValidityUnits:
        RefreshToken: days
      SupportedIdentityProviders:
        - COGNITO
      AllowedOAuthFlowsUserPoolClient: true
      CallbackURLs:
        - https://chatvious.coding-wielder.com/callback
        - http://localhost:3000/callback
      LogoutURLs:
        - https://main.chatvious.coding-wielder.com
        - http://localhost:8040
      AllowedOAuthFlows:
        - code
      AllowedOAuthScopes:
        - email
        - openid

  UserPoolDomain:
    Type: AWS::Cognito::UserPoolDomain
    Properties:
      Domain: chatvious
      UserPoolId: !Ref UserPool

  StaticWebBucket:
    Type: AWS::S3::Bucket
    Properties:
      BucketName: !Sub ${AWS::StackName}-chatvious-static-web-bucket
      BucketEncryption:
        ServerSideEncryptionConfiguration:
          - ServerSideEncryptionByDefault:
              SSEAlgorithm: AES256
      PublicAccessBlockConfiguration:
        IgnorePublicAcls: true
        RestrictPublicBuckets: true
        BlockPublicAcls: true
        BlockPublicPolicy: true
  CloudFrontDistributionBucketPolicy:
    Type: AWS::S3::BucketPolicy
    Properties:
      Bucket: !Ref StaticWebBucket
      PolicyDocument:
        Statement:
          - Effect: Allow
            Principal:
              Service: cloudfront.amazonaws.com
            Action: s3:GetObject
            Resource: !Sub arn:aws:s3:::${StaticWebBucket}/*
            Condition:
              StringEquals:
                AWS:SourceArn: !Sub arn:aws:cloudfront::${AWS::AccountId}:distribution/${CloudFrontDistribution}

  CloudFrontDistribution:
    Type: AWS::CloudFront::Distribution
    Properties:
      DistributionConfig:
        Origins:
          - DomainName: !GetAtt StaticWebBucket.RegionalDomainName
            Id: !Sub ${AWS::StackName}-chatvious-static-web-bucket-s3-origin
            OriginAccessControlId: !GetAtt WebAppOriginAccessControl.Id
            S3OriginConfig: {}
        Enabled: true
        DefaultRootObject: index.html
        DefaultCacheBehavior:
          AllowedMethods:
            - GET
            - HEAD
            - OPTIONS
          TargetOriginId: !Sub ${AWS::StackName}-chatvious-static-web-bucket-s3-origin
          CachePolicyId: 658327ea-f89d-4fab-a63d-7e88639e58f6 # CachingOptimized
          OriginRequestPolicyId: 88a5eaf4-2fd4-4709-b370-b4c650ea3fcf # CORS-S3Origin
          ViewerProtocolPolicy: redirect-to-https
        PriceClass: PriceClass_All
        IPV6Enabled: true
        Aliases:
          - main.chatvious.coding-wielder.com
        ViewerCertificate:
          AcmCertificateArn: !Ref ChatviousUsEastCertificateArn
          MinimumProtocolVersion: TLSv1.2_2021
          SslSupportMethod: sni-only
        CustomErrorResponses:
          - ErrorCode: 404
            ResponseCode: 200
            ResponsePagePath: /index.html
          - ErrorCode: 403
            ResponseCode: 200
            ResponsePagePath: /index.html
  WebAppOriginAccessControl:
    Type: AWS::CloudFront::OriginAccessControl
    Properties:
      OriginAccessControlConfig:
        Name: !Sub ${AWS::StackName}-WebAppOriginAccessControl
        OriginAccessControlOriginType: s3
        SigningBehavior: always
        SigningProtocol: sigv4

Metadata:
  AWS::Composer::Groups:
    Group:
      Label: Chatvious RestAPI Compute
      Members:
        - LambdaAuthorizer
        - Group2
        - createRoom
        - joinRoom
        - acceptJoinRequest
        - rejectJoinRequest
        - kickMember
        - leaveRoom
        - deleteRoom
        - promoteOrDemoteUser
        - fetchNewMessages
        - deleteAccount
        - callback
    Group2:
      Label: EJS Page Renderers
      Members:
        - dashboardPage
        - roomInfoPage
        - chatRoom
        - profilePage
    Group3:
      Label: Chatvious WebSocket Routes
      Members:
        - WSConnect
        - WSLambdaAuthorizer
        - WSDisconnect
        - joinRoomWS
        - sendMessageWS
        - WebSocketManageConnectionsPolicy
    Group4:
      Label: ChatviousTable Capacity
      Members:
        - TableChatviousReadCapacityScalableTarget
        - TableChatviousReadCapacityScalingPolicy
        - TableChatviousWriteCapacityScalableTarget
        - TableChatviousWriteCapacityScalingPolicy
        - ChatviousTable
    Group5:
      Label: Static Frontend Resources
      Members:
        - CloudFrontDistribution
        - WebAppOriginAccessControl
    Group6:
      Label: UserPoolTriggers
      Members:
        - saveUserDataFunction
        - CognitoPreSignUp

Outputs:
  DynamoDBTableName:
    Description: The name of the DynamoDB Table
    Value: !Ref ChatviousTable

  WebSocketURI:
    Description: The WSS Protocol URI to connect to
    Value: !Join
      - ''
      - - wss://
        - !Ref WebsocketApiDomain
        - /
        - !Ref Stage

  UserPoolId:
    Description: Cognito User Pool ID
    Value: !Ref UserPool
  UserPoolClientId:
    Description: Cognito User Pool Application Client ID
    Value: !Ref UserPoolClient
  UserPoolDomain:
    Description: Cognito User Pool Domain
    Value: !Ref UserPoolDomain
  UserPoolDomainURL:
    Description: Cognito User Pool Application Client Hosted Domain URL
    Value: !Sub https://${UserPoolDomain}.auth.${AWS::Region}.amazoncognito.com
  CognitoLoginURL:
    Description: Cognito User Pool Application Client Hosted Login UI URL
    Value: !Sub https://${UserPoolDomain}.auth.${AWS::Region}.amazoncognito.com/login?client_id=${UserPoolClient}&response_type=code&redirect_uri=https://chatvious.coding-wielder.com/callback
  CognitoSignUpURL:
    Description: Cognito User Pool Application Client Hosted Sign Up UI URL
    Value: !Sub https://${UserPoolDomain}.auth.${AWS::Region}.amazoncognito.com/signup?client_id=${UserPoolClient}&response_type=code&redirect_uri=https://chatvious.coding-wielder.com/callback

  StaticWebAppDomain:
    Value: !GetAtt CloudFrontDistribution.DomainName
  CloudFrontDistributionId:
    Value: !GetAtt CloudFrontDistribution.Id
  StaticWebBucketName:
    Value: !Ref StaticWebBucket
  StaticWebBucketArn:
    Value: !GetAtt StaticWebBucket.Arn