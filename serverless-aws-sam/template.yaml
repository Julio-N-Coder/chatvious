AWSTemplateFormatVersion: '2010-09-09'
Transform: AWS::Serverless-2016-10-31
Description: AWS Sam Template for chatvious

Globals:
  Function:
    Environment:
      Variables:
        NODE_ENV: production
        CLIENT_ID: jet3kkqp4jnkm1v3ta7htu75g
        USER_POOL_ID: us-west-1_iJn1nk3N1
        # domain not set up yet
        DOMAIN: chatvious.coding-wielder.com
        DOMAIN_URL: https://chatvious.coding-wielder.com/main
        SUB_DOMAIN: main.chatvious.coding-wielder.com
        SUB_DOMAIN_URL: https://main.chatvious.coding-wielder.com
        DYNAMODB_TABLE_NAME: chatvious
        IS_LOCAL_SERVER: false
    LoggingConfig:
      LogFormat: JSON

Resources:
  # Delete current chatvoius table in AWS account before first deployment
  ChatviousTable:
    Type: AWS::DynamoDB::Table
    Properties:
      TableName: chatvious
      BillingMode: PROVISIONED
      ProvisionedThroughput:
        ReadCapacityUnits: 1
        WriteCapacityUnits: 1
      AttributeDefinitions:
        - AttributeName: PartitionKey
          AttributeType: S
        - AttributeName: SortKey
          AttributeType: S
        - AttributeName: GSISortKey
          AttributeType: S
      KeySchema:
        - AttributeName: PartitionKey
          KeyType: HASH
        - AttributeName: SortKey
          KeyType: RANGE
      GlobalSecondaryIndexes:
        - IndexName: Generic-GSISort-Index
          KeySchema:
            - AttributeName: PartitionKey
              KeyType: HASH
            - AttributeName: GSISortKey
              KeyType: RANGE
          Projection:
            ProjectionType: ALL
          ProvisionedThroughput:
            ReadCapacityUnits: 1
            WriteCapacityUnits: 1

  TableChatviousReadCapacityScalableTarget:
    Type: AWS::ApplicationAutoScaling::ScalableTarget
    DependsOn: ChatviousTable
    Properties:
      ServiceNamespace: dynamodb
      ResourceId: table/chatvious
      ScalableDimension: dynamodb:table:ReadCapacityUnits
      MinCapacity: 1
      MaxCapacity: 10
      RoleARN: !Sub arn:aws:iam::${AWS::AccountId}:role/aws-service-role/dynamodb.application-autoscaling.amazonaws.com/AWSServiceRoleForApplicationAutoScaling_DynamoDBTable

  TableChatviousReadCapacityScalingPolicy:
    Type: AWS::ApplicationAutoScaling::ScalingPolicy
    DependsOn: TableChatviousReadCapacityScalableTarget
    Properties:
      ServiceNamespace: dynamodb
      ResourceId: table/chatvious
      ScalableDimension: dynamodb:table:ReadCapacityUnits
      PolicyName: chatvious-read-capacity-scaling-policy
      PolicyType: TargetTrackingScaling
      TargetTrackingScalingPolicyConfiguration:
        PredefinedMetricSpecification:
          PredefinedMetricType: DynamoDBReadCapacityUtilization
        ScaleOutCooldown: 60
        ScaleInCooldown: 60
        TargetValue: 70

  TableChatviousWriteCapacityScalableTarget:
    Type: AWS::ApplicationAutoScaling::ScalableTarget
    DependsOn: ChatviousTable
    Properties:
      ServiceNamespace: dynamodb
      ResourceId: table/chatvious
      ScalableDimension: dynamodb:table:WriteCapacityUnits
      MinCapacity: 1
      MaxCapacity: 10
      RoleARN: !Sub arn:aws:iam::${AWS::AccountId}:role/aws-service-role/dynamodb.application-autoscaling.amazonaws.com/AWSServiceRoleForApplicationAutoScaling_DynamoDBTable

  TableChatviousWriteCapacityScalingPolicy:
    Type: AWS::ApplicationAutoScaling::ScalingPolicy
    DependsOn: TableChatviousWriteCapacityScalableTarget
    Properties:
      ServiceNamespace: dynamodb
      ResourceId: table/chatvious
      ScalableDimension: dynamodb:table:WriteCapacityUnits
      PolicyName: chatvious-write-capacity-scaling-policy
      PolicyType: TargetTrackingScaling
      TargetTrackingScalingPolicyConfiguration:
        PredefinedMetricSpecification:
          PredefinedMetricType: DynamoDBWriteCapacityUtilization
        ScaleOutCooldown: 60
        ScaleInCooldown: 60
        TargetValue: 70

  TableChatviousIndexGenericGSISortIndexReadCapacityScalableTarget:
    Type: AWS::ApplicationAutoScaling::ScalableTarget
    DependsOn: ChatviousTable
    Properties:
      ServiceNamespace: dynamodb
      ResourceId: table/chatvious/index/Generic-GSISort-Index
      ScalableDimension: dynamodb:index:ReadCapacityUnits
      MinCapacity: 1
      MaxCapacity: 6
      RoleARN: !Sub arn:aws:iam::${AWS::AccountId}:role/aws-service-role/dynamodb.application-autoscaling.amazonaws.com/AWSServiceRoleForApplicationAutoScaling_DynamoDBTable

  TableChatviousIndexGenericGSISortIndexReadCapacityScalingPolicy:
    Type: AWS::ApplicationAutoScaling::ScalingPolicy
    DependsOn: TableChatviousIndexGenericGSISortIndexReadCapacityScalableTarget
    Properties:
      ServiceNamespace: dynamodb
      ResourceId: table/chatvious/index/Generic-GSISort-Index
      ScalableDimension: dynamodb:index:ReadCapacityUnits
      PolicyName: chatvious-index-Generic-GSISort-Index-read-capacity-scaling-policy
      PolicyType: TargetTrackingScaling
      TargetTrackingScalingPolicyConfiguration:
        PredefinedMetricSpecification:
          PredefinedMetricType: DynamoDBReadCapacityUtilization
        ScaleOutCooldown: 60
        ScaleInCooldown: 60
        TargetValue: 70

  TableChatviousIndexGenericGSISortIndexWriteCapacityScalableTarget:
    Type: AWS::ApplicationAutoScaling::ScalableTarget
    DependsOn: ChatviousTable
    Properties:
      ServiceNamespace: dynamodb
      ResourceId: table/chatvious/index/Generic-GSISort-Index
      ScalableDimension: dynamodb:index:WriteCapacityUnits
      MinCapacity: 1
      MaxCapacity: 6
      RoleARN: !Sub arn:aws:iam::${AWS::AccountId}:role/aws-service-role/dynamodb.application-autoscaling.amazonaws.com/AWSServiceRoleForApplicationAutoScaling_DynamoDBTable

  TableChatviousIndexGenericGSISortIndexWriteCapacityScalingPolicy:
    Type: AWS::ApplicationAutoScaling::ScalingPolicy
    DependsOn: TableChatviousIndexGenericGSISortIndexWriteCapacityScalableTarget
    Properties:
      ServiceNamespace: dynamodb
      ResourceId: table/chatvious/index/Generic-GSISort-Index
      ScalableDimension: dynamodb:index:WriteCapacityUnits
      PolicyName: chatvious-index-Generic-GSISort-Index-write-capacity-scaling-policy
      PolicyType: TargetTrackingScaling
      TargetTrackingScalingPolicyConfiguration:
        PredefinedMetricSpecification:
          PredefinedMetricType: DynamoDBWriteCapacityUtilization
        ScaleOutCooldown: 60
        ScaleInCooldown: 60
        TargetValue: 70

  saveUserDataFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: src/cognito/post-signUp-trigger/
      Handler: saveUserData.handler
      Runtime: nodejs20.x
      MemorySize: 128
      Timeout: 4
      Architectures:
        - x86_64
      Policies:
        - DynamoDBCrudPolicy:
            TableName: !Ref ChatviousTable
      Environment:
        Variables:
          CHATVIOUSTABLE_TABLE_NAME: !Ref ChatviousTable
          CHATVIOUSTABLE_TABLE_ARN: !GetAtt ChatviousTable.Arn
    Metadata:
      BuildMethod: esbuild
      BuildProperties:
        Minify: true
        Target: es2020
        Sourcemap: true

  dashboardPage:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: Chatvious_dashboardPage
      Description: Renders dashboard Page for Chatvious
      PackageType: Image
      MemorySize: 256
      Timeout: 6
      Architectures:
        - x86_64
      Policies:
        - DynamoDBCrudPolicy:
            TableName: !Ref ChatviousTable
      Events:
        ChatviousRestApiGETdashboard:
          Type: Api
          Properties:
            Path: /dashboard
            Method: GET
            RestApiId: !Ref ChatviousRestApi
      Environment:
        Variables:
          CHATVIOUSTABLE_TABLE_NAME: !Ref ChatviousTable
          CHATVIOUSTABLE_TABLE_ARN: !GetAtt ChatviousTable.Arn
    Metadata:
      DockerContext: ./src
      Dockerfile: dashboardPage.Dockerfile
      DockerTag: latest

  roomInfoPage:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: Chatvious_roomInfoPage
      Description: Renders roomInfo Page for Chatvious
      PackageType: Image
      MemorySize: 256
      Timeout: 6
      Architectures:
        - x86_64
      Policies:
        - DynamoDBCrudPolicy:
            TableName: !Ref ChatviousTable
      Events:
        ChatviousRestApiGETroomsRoomID:
          Type: Api
          Properties:
            Path: /rooms/{RoomID}
            Method: GET
            RestApiId: !Ref ChatviousRestApi
      Environment:
        Variables:
          CHATVIOUSTABLE_TABLE_NAME: !Ref ChatviousTable
          CHATVIOUSTABLE_TABLE_ARN: !GetAtt ChatviousTable.Arn
    Metadata:
      DockerContext: ./src
      Dockerfile: roomInfoPage.Dockerfile
      DockerTag: latest

  chatRoom:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: Chatvious_chatRoom
      Description: Renders chatRoom Page for Chatvious
      PackageType: Image
      MemorySize: 256
      Timeout: 6
      Architectures:
        - x86_64
      Policies:
        - DynamoDBCrudPolicy:
            TableName: !Ref ChatviousTable
      Events:
        ChatviousRestApiGETchatroomRoomID:
          Type: Api
          Properties:
            Path: /chat-room/{RoomID}
            Method: GET
            RestApiId: !Ref ChatviousRestApi
      Environment:
        Variables:
          CHATVIOUSTABLE_TABLE_NAME: !Ref ChatviousTable
          CHATVIOUSTABLE_TABLE_ARN: !GetAtt ChatviousTable.Arn
    Metadata:
      DockerContext: ./src
      Dockerfile: chatRoom.Dockerfile
      DockerTag: latest

  createRoom:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: Chatvious_createRoom
      Description: Creates a new chat room
      CodeUri: ./src
      Handler: roomRoutes/createRoom/createRoom.handler
      Runtime: nodejs20.x
      MemorySize: 128
      Timeout: 6
      Architectures:
        - x86_64
      Policies:
        - DynamoDBCrudPolicy:
            TableName: !Ref ChatviousTable
      Events:
        ChatviousRestApiPOSTroomscreateRoom:
          Type: Api
          Properties:
            Path: /rooms/createRoom
            Method: POST
            RestApiId: !Ref ChatviousRestApi
      Environment:
        Variables:
          CHATVIOUSTABLE_TABLE_NAME: !Ref ChatviousTable
          CHATVIOUSTABLE_TABLE_ARN: !GetAtt ChatviousTable.Arn
    Metadata:
      BuildMethod: esbuild
      BuildProperties:
        Minify: true
        Bundle: true
        Target: es2020
        Sourcemap: true

  joinRoom:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: Chatvious_joinRoom
      Description: A user can join a chat room
      CodeUri: ./src
      Handler: roomRoutes/joinRoom/joinRoom.handler
      Runtime: nodejs20.x
      MemorySize: 128
      Timeout: 6
      Architectures:
        - x86_64
      Policies:
        - DynamoDBCrudPolicy:
            TableName: !Ref ChatviousTable
      Events:
        ChatviousRestApiPOSTroomsjoinRoom:
          Type: Api
          Properties:
            Path: /rooms/joinRoom
            Method: POST
            RestApiId: !Ref ChatviousRestApi
      Environment:
        Variables:
          CHATVIOUSTABLE_TABLE_NAME: !Ref ChatviousTable
          CHATVIOUSTABLE_TABLE_ARN: !GetAtt ChatviousTable.Arn
    Metadata:
      BuildMethod: esbuild
      BuildProperties:
        Minify: true
        Bundle: true
        Target: es2020
        Sourcemap: true

  acceptJoinRequest:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: Chatvious_acceptJoinRequest
      Description: Accepts a join request for a user to join a chat room
      CodeUri: ./src
      Handler: roomRoutes/acceptJoinRequest/acceptJoinRequest.handler
      Runtime: nodejs20.x
      MemorySize: 128
      Timeout: 6
      Architectures:
        - x86_64
      Policies:
        - DynamoDBCrudPolicy:
            TableName: !Ref ChatviousTable
      Events:
        ChatviousRestApiPOSTroomsacceptJoinRequest:
          Type: Api
          Properties:
            Path: /rooms/acceptJoinRequest
            Method: POST
            RestApiId: !Ref ChatviousRestApi
      Environment:
        Variables:
          CHATVIOUSTABLE_TABLE_NAME: !Ref ChatviousTable
          CHATVIOUSTABLE_TABLE_ARN: !GetAtt ChatviousTable.Arn
    Metadata:
      BuildMethod: esbuild
      BuildProperties:
        Minify: true
        Bundle: true
        Target: es2020
        Sourcemap: true

  rejectJoinRequest:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: Chatvious_rejectJoinRequest
      Description: Rejects a join request for a chat room
      CodeUri: ./src
      Handler: roomRoutes/rejectJoinRequest/rejectJoinRequest.handler
      Runtime: nodejs20.x
      MemorySize: 128
      Timeout: 6
      Architectures:
        - x86_64
      Policies:
        - DynamoDBCrudPolicy:
            TableName: !Ref ChatviousTable
      Events:
        ChatviousRestApiPOSTroomsrejectJoinRequest:
          Type: Api
          Properties:
            Path: /rooms/rejectJoinRequest
            Method: POST
            RestApiId: !Ref ChatviousRestApi
      Environment:
        Variables:
          CHATVIOUSTABLE_TABLE_NAME: !Ref ChatviousTable
          CHATVIOUSTABLE_TABLE_ARN: !GetAtt ChatviousTable.Arn
    Metadata:
      BuildMethod: esbuild
      BuildProperties:
        Minify: true
        Bundle: true
        Target: es2020
        Sourcemap: true

  kickMember:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: Chatvious_kickMember
      Description: Kicks a member from a chat room
      CodeUri: ./src
      Handler: roomRoutes/kickMember/kickMember.handler
      Runtime: nodejs20.x
      MemorySize: 128
      Timeout: 6
      Architectures:
        - x86_64
      Policies:
        - DynamoDBCrudPolicy:
            TableName: !Ref ChatviousTable
      Events:
        ChatviousRestApiPOSTroomskickMember:
          Type: Api
          Properties:
            Path: /rooms/kickMember
            Method: POST
            RestApiId: !Ref ChatviousRestApi
      Environment:
        Variables:
          CHATVIOUSTABLE_TABLE_NAME: !Ref ChatviousTable
          CHATVIOUSTABLE_TABLE_ARN: !GetAtt ChatviousTable.Arn
    Metadata:
      BuildMethod: esbuild
      BuildProperties:
        Minify: true
        Bundle: true
        Target: es2020
        Sourcemap: true

  leaveRoom:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: Chatvious_leaveRoom
      Description: A route for a user to leave a chat room
      CodeUri: ./src
      Handler: roomRoutes/leaveRoom/leaveRoom.handler
      Runtime: nodejs20.x
      MemorySize: 128
      Timeout: 6
      Architectures:
        - x86_64
      Policies:
        - DynamoDBCrudPolicy:
            TableName: !Ref ChatviousTable
      Events:
        ChatviousRestApiPOSTroomsleaveRoom:
          Type: Api
          Properties:
            Path: /rooms/leaveRoom
            Method: POST
            RestApiId: !Ref ChatviousRestApi
      Environment:
        Variables:
          CHATVIOUSTABLE_TABLE_NAME: !Ref ChatviousTable
          CHATVIOUSTABLE_TABLE_ARN: !GetAtt ChatviousTable.Arn
    Metadata:
      BuildMethod: esbuild
      BuildProperties:
        Minify: true
        Bundle: true
        Target: es2020
        Sourcemap: true

  deleteRoom:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: Chatvious_deleteRoom
      Description: Deletes a chat room
      CodeUri: ./src
      Handler: roomRoutes/deleteRoom/deleteRoom.handler
      Runtime: nodejs20.x
      MemorySize: 128
      Timeout: 6
      Architectures:
        - x86_64
      Policies:
        - DynamoDBCrudPolicy:
            TableName: !Ref ChatviousTable
      Events:
        ChatviousRestApiPOSTroomsdeleteRoom:
          Type: Api
          Properties:
            Path: /rooms/deleteRoom
            Method: POST
            RestApiId: !Ref ChatviousRestApi
      Environment:
        Variables:
          CHATVIOUSTABLE_TABLE_NAME: !Ref ChatviousTable
          CHATVIOUSTABLE_TABLE_ARN: !GetAtt ChatviousTable.Arn
    Metadata:
      BuildMethod: esbuild
      BuildProperties:
        Minify: true
        Bundle: true
        Target: es2020
        Sourcemap: true

  promoteOrDemoteUser:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: Chatvious_promoteOrDemoteUser
      Description: Promotes or demotes a user in a chat room
      CodeUri: ./src
      Handler: roomRoutes/promoteOrDemoteUser/promoteOrDemoteUser.handler
      Runtime: nodejs20.x
      MemorySize: 128
      Timeout: 6
      Architectures:
        - x86_64
      Policies:
        - DynamoDBCrudPolicy:
            TableName: !Ref ChatviousTable
      Events:
        ChatviousRestApiPOSTroomspromoteOrDemoteUser:
          Type: Api
          Properties:
            Path: /rooms/promoteOrDemoteUser
            Method: POST
            RestApiId: !Ref ChatviousRestApi
      Environment:
        Variables:
          CHATVIOUSTABLE_TABLE_NAME: !Ref ChatviousTable
          CHATVIOUSTABLE_TABLE_ARN: !GetAtt ChatviousTable.Arn
    Metadata:
      BuildMethod: esbuild
      BuildProperties:
        Minify: true
        Bundle: true
        Target: es2020
        Sourcemap: true

  callback:
    Type: AWS::Serverless::Function
    Properties:
      Description: Callback route to exchange cognito auth codes for tokens
      FunctionName: Chatvious_callback
      Architectures:
        - x86_64
      MemorySize: 128
      Timeout: 10
      CodeUri: ./src
      Handler: cognito/callback/callback.handler
      Runtime: nodejs20.x
      Environment:
        Variables:
          COGNITO_DOMAIN: https://chatvious.auth.us-west-1.amazoncognito.com
          CALLBACK_URL: http://localhost:3000/callback
      Events:
        ChatviousRestApiGETcallback:
          Type: Api
          Properties:
            Path: /callback
            Method: GET
            RestApiId: !Ref ChatviousRestApi
            Auth:
              Authorizer: NONE
    Metadata:
      BuildMethod: esbuild
      BuildProperties:
        Minify: true
        Bundle: true
        Target: es2020
        Sourcemap: true

  LambdaAuthorizer:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: Chatvious_LambdaAuthorizer
      Description: The Lambda Authorizer for chatvious
      MemorySize: 128
      Timeout: 10
      CodeUri: ./src
      Handler: cognito/lambda-authorizer/lambda-authorizer.handler
      Runtime: nodejs20.x
      Architectures:
        - x86_64
      Environment:
        Variables:
          COGNITO_DOMAIN: https://chatvious.auth.us-west-1.amazoncognito.com
    Metadata:
      BuildMethod: esbuild
      BuildProperties:
        Minify: true
        Bundle: true
        Target: es2020
        Sourcemap: true

  ChatviousRestApi:
    Type: AWS::Serverless::Api
    Properties:
      Name: Chatvious_RestApi
      StageName: main
      Auth:
        Authorizers:
          LambdaAuthorizer:
            FunctionArn: !GetAtt LambdaAuthorizer.Arn
            Identity:
              Header: Cookie
              ReauthorizeEvery: 0
        DefaultAuthorizer: LambdaAuthorizer
      DefinitionBody:
        openapi: '3.0'
        info: {}
        paths:
          /dashboard:
            get:
              x-amazon-apigateway-integration:
                httpMethod: GET
                type: aws_proxy
                uri: !Sub arn:${AWS::Partition}:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${dashboardPage.Arn}/invocations
              responses: {}
          /callback:
            get:
              x-amazon-apigateway-integration:
                httpMethod: GET
                type: aws_proxy
                uri: !Sub arn:${AWS::Partition}:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${callback.Arn}/invocations
              responses: {}
          /rooms/createRoom:
            post:
              x-amazon-apigateway-integration:
                httpMethod: POST
                type: aws_proxy
                uri: !Sub arn:${AWS::Partition}:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${createRoom.Arn}/invocations
              responses: {}
          /rooms/joinRoom:
            post:
              x-amazon-apigateway-integration:
                httpMethod: POST
                type: aws_proxy
                uri: !Sub arn:${AWS::Partition}:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${joinRoom.Arn}/invocations
              responses: {}
          /rooms/{RoomID}:
            get:
              x-amazon-apigateway-integration:
                httpMethod: GET
                type: aws_proxy
                uri: !Sub arn:${AWS::Partition}:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${roomInfoPage.Arn}/invocations
              responses: {}
          /rooms/acceptJoinRequest:
            post:
              x-amazon-apigateway-integration:
                httpMethod: POST
                type: aws_proxy
                uri: !Sub arn:${AWS::Partition}:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${acceptJoinRequest.Arn}/invocations
              responses: {}
          /rooms/rejectJoinRequest:
            post:
              x-amazon-apigateway-integration:
                httpMethod: POST
                type: aws_proxy
                uri: !Sub arn:${AWS::Partition}:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${rejectJoinRequest.Arn}/invocations
              responses: {}
          /rooms/kickMember:
            post:
              x-amazon-apigateway-integration:
                httpMethod: POST
                type: aws_proxy
                uri: !Sub arn:${AWS::Partition}:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${kickMember.Arn}/invocations
              responses: {}
          /rooms/leaveRoom:
            post:
              x-amazon-apigateway-integration:
                httpMethod: POST
                type: aws_proxy
                uri: !Sub arn:${AWS::Partition}:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${leaveRoom.Arn}/invocations
              responses: {}
          /rooms/deleteRoom:
            post:
              x-amazon-apigateway-integration:
                httpMethod: POST
                type: aws_proxy
                uri: !Sub arn:${AWS::Partition}:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${deleteRoom.Arn}/invocations
              responses: {}
          /chat-room/{RoomID}:
            get:
              x-amazon-apigateway-integration:
                httpMethod: GET
                type: aws_proxy
                uri: !Sub arn:${AWS::Partition}:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${chatRoom.Arn}/invocations
              responses: {}
          /rooms/promoteOrDemoteUser:
            post:
              x-amazon-apigateway-integration:
                httpMethod: POST
                type: aws_proxy
                uri: !Sub arn:${AWS::Partition}:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${promoteOrDemoteUser.Arn}/invocations
              responses: {}
      # Below is the correct syntax. I don't know why it's erroring in VSCode.
      EndpointConfiguration: REGIONAL
      # Set up domain configuration once I get a domain
      Cors:
        AllowMethods: '''OPTIONS, POST, GET'''
        AllowHeaders: '''Content-Type,Cookie'''
        AllowOrigin: '''*'''
        MaxAge: 5

  WebSocketManageConnectionsPolicy:
    Type: AWS::IAM::ManagedPolicy
    Properties:
      ManagedPolicyName: Chatvious_WebSocketManageConnectionsPolicy
      PolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Action:
              - execute-api:ManageConnections
            # Once api gateway websocket resource is made, change this policy to the api gateway arn to be more specific
            Resource:
              - arn:aws:execute-api:*:*:*

  WSLambdaAuthorizer:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: Chatvious_WSLambdaAuthorizer
      Description: The Lambda Authorizer for chatvious websockets
      CodeUri: ./src
      Handler: websocket-endpoints/lambda-authorizer/websocket-auth.handler
      Runtime: nodejs20.x
      MemorySize: 128
      Timeout: 10
      Architectures:
        - x86_64
      Environment:
        Variables:
          COGNITO_DOMAIN: https://chatvious.auth.us-west-1.amazoncognito.com
    Metadata:
      BuildMethod: esbuild
      BuildProperties:
        Minify: true
        Bundle: true
        Target: es2020
        Sourcemap: true

  WSConnect:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: Chatvious_WSConnect
      Description: The Default Websocket route for when a user first connects to a chat room
      CodeUri: ./src
      Handler: websocket-endpoints/connect/connect.handler
      Runtime: nodejs20.x
      MemorySize: 128
      Timeout: 6
      Architectures:
        - x86_64
      Policies:
        - DynamoDBCrudPolicy:
            TableName: !Ref ChatviousTable
      Environment:
        Variables:
          CHATVIOUSTABLE_TABLE_NAME: !Ref ChatviousTable
          CHATVIOUSTABLE_TABLE_ARN: !GetAtt ChatviousTable.Arn
    Metadata:
      BuildMethod: esbuild
      BuildProperties:
        Minify: true
        Bundle: true
        Target: es2020
        Sourcemap: true

  WSDisconnect:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: Chatvious_WSDisconnect
      Description: The Default Websocket route for when a user disconnects from a chat room
      CodeUri: ./src
      Handler: websocket-endpoints/disconnect/disconnect.handler
      Runtime: nodejs20.x
      MemorySize: 128
      Timeout: 6
      Architectures:
        - x86_64
      Policies:
        - !Ref WebSocketManageConnectionsPolicy
        - DynamoDBCrudPolicy:
            TableName: !Ref ChatviousTable
      Environment:
        Variables:
          CHATVIOUSTABLE_TABLE_NAME: !Ref ChatviousTable
          CHATVIOUSTABLE_TABLE_ARN: !GetAtt ChatviousTable.Arn
    Metadata:
      BuildMethod: esbuild
      BuildProperties:
        Minify: true
        Bundle: true
        Target: es2020
        Sourcemap: true

  joinRoomWS:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: Chatvious_joinRoomWS
      Description: A Websocket route for a user to join a chat room
      CodeUri: ./src
      Handler: websocket-endpoints/joinRoom/joinRoom.handler
      Runtime: nodejs20.x
      MemorySize: 128
      Timeout: 6
      Architectures:
        - x86_64
      Policies:
        - !Ref WebSocketManageConnectionsPolicy
        - DynamoDBCrudPolicy:
            TableName: !Ref ChatviousTable
      Environment:
        Variables:
          CHATVIOUSTABLE_TABLE_NAME: !Ref ChatviousTable
          CHATVIOUSTABLE_TABLE_ARN: !GetAtt ChatviousTable.Arn
    Metadata:
      BuildMethod: esbuild
      BuildProperties:
        Minify: true
        Bundle: true
        Target: es2020
        Sourcemap: true

  sendMessageWS:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: Chatvious_sendMessageWS
      Description: A Websocket route for a user to send a message in a chat room
      CodeUri: ./src
      Handler: websocket-endpoints/sendMessage/sendMessage.handler
      Runtime: nodejs20.x
      MemorySize: 128
      Timeout: 6
      Architectures:
        - x86_64
      Policies:
        - !Ref WebSocketManageConnectionsPolicy
        - DynamoDBCrudPolicy:
            TableName: !Ref ChatviousTable
      Environment:
        Variables:
          CHATVIOUSTABLE_TABLE_NAME: !Ref ChatviousTable
          CHATVIOUSTABLE_TABLE_ARN: !GetAtt ChatviousTable.Arn
    Metadata:
      BuildMethod: esbuild
      BuildProperties:
        Minify: true
        Bundle: true
        Target: es2020
        Sourcemap: true

  WebsocketApi:
    Type: AWS::ApiGatewayV2::Api
    Properties:
      Name: Chatvious_WebsocketApi
      ProtocolType: WEBSOCKET
      RouteSelectionExpression: $request.body.action

  WSConnectPermission:
    Type: AWS::Lambda::Permission
    DependsOn:
      - WebsocketApi
    Properties:
      Action: lambda:InvokeFunction
      FunctionName: !Ref WSConnect
      Principal: apigateway.amazonaws.com
  WSDisconnectPermission:
    Type: AWS::Lambda::Permission
    DependsOn:
      - WebsocketApi
    Properties:
      Action: lambda:InvokeFunction
      FunctionName: !Ref WSDisconnect
      Principal: apigateway.amazonaws.com
  joinRoomWSPermission:
    Type: AWS::Lambda::Permission
    DependsOn:
      - WebsocketApi
    Properties:
      Action: lambda:InvokeFunction
      FunctionName: !Ref joinRoomWS
      Principal: apigateway.amazonaws.com
  sendMessageWSPermission:
    Type: AWS::Lambda::Permission
    DependsOn:
      - WebsocketApi
    Properties:
      Action: lambda:InvokeFunction
      FunctionName: !Ref sendMessageWS
      Principal: apigateway.amazonaws.com

  WebsocketAuthorizer:
    Type: AWS::ApiGatewayV2::Authorizer
    Properties:
      ApiId: !Ref WebsocketApi
      AuthorizerType: REQUEST
      Name: Chatvious_WebsocketAuthorizer
      AuthorizerResultTtlInSeconds: 0
      AuthorizerUri: !Sub arn:${AWS::Partition}:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${WSLambdaAuthorizer.Arn}/invocations
      IdentitySource:
        - route.request.querystring.token
        - route.request.header.Cookie

  ConnectRoute:
    Type: AWS::ApiGatewayV2::Route
    Properties:
      ApiId: !Ref WebsocketApi
      RouteKey: $connect
      AuthorizationType: NONE
      OperationName: ConnectRoute
      Target: !Join
        - /
        - - integrations
          - !Ref ConnectInteg # Ignore vscode validation error

  ConnectInteg:
    Type: AWS::ApiGatewayV2::Integration
    Properties:
      ApiId: !Ref WebsocketApi
      Description: Connect Integration
      IntegrationType: AWS_PROXY
      IntegrationUri: !Sub arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${WSConnect.Arn}/invocations

  DisconnectRoute:
    Type: AWS::ApiGatewayV2::Route
    Properties:
      ApiId: !Ref WebsocketApi
      RouteKey: $disconnect
      AuthorizationType: NONE
      OperationName: DisconnectRoute
      Target: !Join
        - /
        - - integrations
          - !Ref DisconnectInteg # Ignore vscode validation error

  DisconnectInteg:
    Type: AWS::ApiGatewayV2::Integration
    Properties:
      ApiId: !Ref WebsocketApi
      Description: Disconnect Integration
      IntegrationType: AWS_PROXY
      IntegrationUri: !Sub arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${WSDisconnect.Arn}/invocations

  JoinRoomRoute:
    Type: AWS::ApiGatewayV2::Route
    Properties:
      ApiId: !Ref WebsocketApi
      RouteKey: joinroom
      AuthorizationType: NONE
      OperationName: JoinRoomRoute
      Target: !Join
        - /
        - - integrations
          - !Ref JoinRoomInteg # Ignore vscode validation error

  JoinRoomInteg:
    Type: AWS::ApiGatewayV2::Integration
    Properties:
      ApiId: !Ref WebsocketApi
      Description: Send Message Integration
      IntegrationType: AWS_PROXY
      IntegrationUri: !Sub arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${joinRoomWS.Arn}/invocations

  SendMessageRoute:
    Type: AWS::ApiGatewayV2::Route
    Properties:
      ApiId: !Ref WebsocketApi
      RouteKey: sendmessage
      AuthorizationType: NONE
      OperationName: SendMessageRoute
      Target: !Join
        - /
        - - integrations
          - !Ref SendMessageInteg # Ignore vscode validation error

  SendMessageInteg:
    Type: AWS::ApiGatewayV2::Integration
    Properties:
      ApiId: !Ref WebsocketApi
      Description: Send Message Integration
      IntegrationType: AWS_PROXY
      IntegrationUri: !Sub arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${sendMessageWS.Arn}/invocations

  Deployment:
    Type: AWS::ApiGatewayV2::Deployment
    DependsOn:
      - ConnectRoute
      - JoinRoomRoute
      - SendMessageRoute
      - DisconnectRoute
    Properties:
      ApiId: !Ref WebsocketApi

  Stage:
    Type: AWS::ApiGatewayV2::Stage
    Properties:
      StageName: Prod
      Description: Prod Stage
      DeploymentId: !Ref Deployment
      ApiId: !Ref WebsocketApi

Metadata:
  AWS::Composer::Groups:
    Group:
      Label: Chatvious RestAPI Compute
      Members:
        - LambdaAuthorizer
        - callback
        - createRoom
        - joinRoom
        - acceptJoinRequest
        - rejectJoinRequest
        - kickMember
        - leaveRoom
        - deleteRoom
        - promoteOrDemoteUser
        - Group2
    Group2:
      Label: EJS Page Renderers
      Members:
        - dashboardPage
        - roomInfoPage
        - chatRoom
    Group3:
      Label: Chatvious WebSocket Routes
      Members:
        - WSConnect
        - WSLambdaAuthorizer
        - WSDisconnect
        - joinRoomWS
        - sendMessageWS
        - WebSocketManageConnectionsPolicy
    Group4:
      Label: ChatviousTable Capacity
      Members:
        - TableChatviousReadCapacityScalableTarget
        - TableChatviousReadCapacityScalingPolicy
        - TableChatviousWriteCapacityScalableTarget
        - TableChatviousWriteCapacityScalingPolicy
        - TableChatviousIndexGenericGSISortIndexReadCapacityScalableTarget
        - TableChatviousIndexGenericGSISortIndexReadCapacityScalingPolicy
        - TableChatviousIndexGenericGSISortIndexWriteCapacityScalableTarget
        - TableChatviousIndexGenericGSISortIndexWriteCapacityScalingPolicy
        - ChatviousTable

Outputs:
  DynamoDBTableName:
    Description: The name of the DynamoDB Table
    Value: !Ref ChatviousTable

  WebSocketURI:
    Description: The WSS Protocol URI to connect to
    Value: !Join
      - ''
      - - wss://
        - !Ref WebsocketApi
        - .execute-api.
        - !Ref AWS::Region
        - .amazonaws.com/
        - !Ref Stage